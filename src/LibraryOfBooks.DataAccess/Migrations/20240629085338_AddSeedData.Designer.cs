// <auto-generated />
using System;
using LibraryOfBooks.Dataccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryOfBooks.Dataccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240629085338_AddSeedData")]
    partial class AddSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryOfBooks.Domain.Entities.Asset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("LibraryOfBooks.Domain.Entities.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FileId");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryOfBooks.Domain.Entities.BookCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BookCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 6, 29, 8, 53, 38, 322, DateTimeKind.Utc).AddTicks(2651),
                            IsDeleted = false,
                            Name = "Adabiyot"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 6, 29, 8, 53, 38, 322, DateTimeKind.Utc).AddTicks(2653),
                            IsDeleted = false,
                            Name = "Ilmiy-fantastika"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 6, 29, 8, 53, 38, 322, DateTimeKind.Utc).AddTicks(2655),
                            IsDeleted = false,
                            Name = "Fantaziya"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 6, 29, 8, 53, 38, 322, DateTimeKind.Utc).AddTicks(2656),
                            IsDeleted = false,
                            Name = "Detektiv va Triller"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 6, 29, 8, 53, 38, 322, DateTimeKind.Utc).AddTicks(2657),
                            IsDeleted = false,
                            Name = "Romantika"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2024, 6, 29, 8, 53, 38, 322, DateTimeKind.Utc).AddTicks(2658),
                            IsDeleted = false,
                            Name = "Ilmiy"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2024, 6, 29, 8, 53, 38, 322, DateTimeKind.Utc).AddTicks(2660),
                            IsDeleted = false,
                            Name = "Biznes va Iqtisodiyot"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2024, 6, 29, 8, 53, 38, 322, DateTimeKind.Utc).AddTicks(2661),
                            IsDeleted = false,
                            Name = "O'z-o'zini rivojlantirish"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2024, 6, 29, 8, 53, 38, 322, DateTimeKind.Utc).AddTicks(2662),
                            IsDeleted = false,
                            Name = "Tarix"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2024, 6, 29, 8, 53, 38, 322, DateTimeKind.Utc).AddTicks(2663),
                            IsDeleted = false,
                            Name = "Bolalar adabiyoti"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2024, 6, 29, 8, 53, 38, 322, DateTimeKind.Utc).AddTicks(2664),
                            IsDeleted = false,
                            Name = "San'at va Madaniyat"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2024, 6, 29, 8, 53, 38, 322, DateTimeKind.Utc).AddTicks(2665),
                            IsDeleted = false,
                            Name = "Bolalar adabiyoti"
                        });
                });

            modelBuilder.Entity("LibraryOfBooks.Domain.Entities.Favorite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("LibraryOfBooks.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LibraryOfBooks.Domain.Entities.Book", b =>
                {
                    b.HasOne("LibraryOfBooks.Domain.Entities.BookCategory", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryOfBooks.Domain.Entities.Asset", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryOfBooks.Domain.Entities.Asset", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("LibraryOfBooks.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("File");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryOfBooks.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("LibraryOfBooks.Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryOfBooks.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryOfBooks.Domain.Entities.User", b =>
                {
                    b.HasOne("LibraryOfBooks.Domain.Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("LibraryOfBooks.Domain.Entities.BookCategory", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
