@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@using LibraryOfBooks.Web.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                @if (isAuthenticated)
                {
                    <button class="btn btn-outline-danger" @onclick="Logout">Logout</button>
                }
                else
                {
                    <button class="btn btn-outline-success" @onclick="Login">Login</button>
                }
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
</CascadingAuthenticationState>

@code {
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity.IsAuthenticated;
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private void Login()
    {
        NavigationManager.NavigateTo("login");
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("login");
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = task.Result;
        isAuthenticated = authState.User.Identity.IsAuthenticated;
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
